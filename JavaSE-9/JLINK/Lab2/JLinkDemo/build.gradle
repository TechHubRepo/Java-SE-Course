plugins {
    id 'java'
}

group = 'com.jlink.demo'
version = '1.0.0'

/* Directory for the Java Module (.jmod) file */
def jmodDir = layout.buildDirectory.dir("jmods").get().asFile;

/* Defines the JMOD file name */
def jmodFileName = "$jmodDir/${project.name}.jmod";

/* Defined the JMOD version */
def jmodVersion = '1.0';

/* Compiled classes output directory */
def classesDir = layout.buildDirectory.dir("classes/java/main").get().asFile;

/* Directory for the Java Module (.jmod) file */
def jre = layout.buildDirectory.dir("jre").get().asFile;

/* Defines the JMOD file name */
def jreName = "$jre/AppJRE";

/** Add required modules here */
def moduleNames = "java.base,java.logging,module.jlnk";

/** Defined the Application Launcher */
def appLauncher = "myapp=module.jlnk/com.jlink.lab2.Main";

java {
    /* Ensure Gradle uses the module path */
    modularity.inferModulePath = true
}

repositories {
    mavenCentral()
}

dependencies {}


/* Register a task to create JMOD file */
tasks.register('buildJmod', Exec) {

    /* Ensures that classes are compiled before creating the JMOD file */
    dependsOn('classes');
    group = 'build';
    description = 'Creates a JMOD file for the project module';

    inputs.dir classesDir
    outputs.dir jmodDir

    /* Creates JMOD destination directory */
    doFirst {
        jmodDir.mkdirs()
    }

    /* Running JMOD Command to create jmod file */
    commandLine = ['jmod', 'create', '--class-path', classesDir, '--module-version', jmodVersion, jmodFileName] as List<String>
}

/** Build Application JRE */
tasks.register('buildJRE', Exec) {

    /* Ensures that classes are compiled before creating the JMOD file */
    dependsOn('classes');
    group = 'build';
    description = 'Creates a Custom JRE to run the application';

    inputs.dir classesDir
    outputs.dir jre

    /* Creates JRE destination directory */
    doFirst {
        jre.mkdirs()
    }

    /* Running JLINK Command to create Application JRE */
    commandLine = ['jlink', '--module-path', classesDir, "--add-modules", moduleNames, "--launcher", appLauncher, "--output", jreName] as List<String>
}